#!/usr/bin/env bash

. /usr/local/etc/hephaestus/common || exit 1

usage () { echo -e "usage: $0 msgid retcode path image repo rev\nbuild_report will be read from stdin" ; }
usageerr () { usage >&2 ; return 1 ; }

A2U=`which ascii2uni` || { echo "Install ascii2uni(1) from the uni2ascii package" >&2 ; exit 1; }
TMPDIR="`dirname $ITINERARY`"

[ $# -eq 6 ] || usageerr

FROM="Hephaestus-`svnversion .` autobuilder <dank@qemfd.net>"

REPO="$5"
REV="$6"
HEPHHOME="hephaestus/builds/$REPO/$REV"
# We require a leading foreslash, optional directory components and a filename,
# and want to avoid any foreslash doubling. "$3/" doubles on a "/" or any path
# including the trailing foreslash; `dirname /foo` eats the foo, so we append
# 'strip' to the dirname argument.
BUILDREPORT="`dirname $3/strip`/$4.html"
WEBFILE="/var/www/$HEPHHOME$BUILDREPORT"
URI="http://svn.research.sys/$HEPHHOME$BUILDREPORT"

log_build_tmp () {
	local TMP="$1" ; shift
	local SRC="$1" ; shift
	local URI="$1" ; shift
	"$XML" ed \
	 -s "//commit[inreplyto='$1']/build[path='$3' and image='$4']/result" -t elem -n donetime -v "`date '+%Y-%m-%dT%H:%M:%S'`" \
	 -s "//commit[inreplyto='$1']/build[path='$3' and image='$4']/result" -t elem -n retcode -v "$2" \
	 -s "//commit[inreplyto='$1']/build[path='$3' and image='$4']/result/retcode" -t attr -n 'xlink:type' -v "simple" \
	 -s "//commit[inreplyto='$1']/build[path='$3' and image='$4']/result/retcode" -t attr -n 'xlink:show' -v "replace" \
	 -s "//commit[inreplyto='$1']/build[path='$3' and image='$4']/result/retcode" -t attr -n 'xlink:href' -v "$URI" \
	 < "$SRC" > "$TMP"
}

log_build_locked () {
	CHECK=`"$XML" sel -t -c "//commit[inreplyto='$3']/build[path='$5' and image='$6']/result/retcode" < "$1"`
	if [ -n "$CHECK" ] ; then
		echo "Already had a report!" >&2
		return 1
	fi
	local TMP="`mktemp -t \`basename $0\`.XXXXXX`"
	chmod 0644 "$TMP"
	log_build_tmp "$TMP" "$@" || { rm -f "$TMP" ; return 1 ; }
	mv "$TMP" "$1"
}

log_build () {
	spin_on_dotlock "$1"
	log_build_locked "$@" || { unlock_dotlock "$1" ; exit 1 ; }
	unlock_dotlock "$1"
}

[ -d "`dirname $WEBFILE`" ] || mkdir -m 0755 -p "`dirname $WEBFILE`"
LINES=`"$XML" esc | sed -e 's/$/<br\/>/' | tee -a "$WEBFILE" | wc -l` || { rm -f "$WEBFILE" ; exit 1 ; }
echo "Got $LINES lines for $WEBFILE"
log_build "$ITINERARY" "$URI" "$@"

NEWSROOT=sys.research.hephaestus.
NEWSLEAF=autobuilds

[ ! $2 -eq 255 ] || exit 0
[ $2 -eq 0 ] || { NEWSROOT=sys.research.subversion. ; NEWSLEAF="$REPO" ; }

  "$A2U" -q -a H < "$WEBFILE" | "$A2U" -q -a Q | tail -n50 - | sed -e 's/<br\/>$//' && \
( echo -e "Subject: [$REPO-$REV $4] $3 returned $2\nFrom: $FROM\nContent-Type: text/plain; charset=utf-8" && \
  { [ $2 -ne 0 ] || echo -e "\nBuild succeeded (`date '+%Y-%m-%dT%H:%M:%S'`)" ; } && \
  { [ $2 -eq 0 ] || echo -e "In-Reply-To: <$1>\n\nBuild failed (`date '+%Y-%m-%dT%H:%M:%S'`)" ; } && \
  { [ $((LINES)) -le 50 ] || echo -e "$((LINES - 50)) preceding lines have been truncated. \c" ; } && \
  echo -e "The full build logs can be found at:\n $URI\n"
  tail -n50 "$WEBFILE" | sed -e 's/<br\/>$//' && \
  echo -e "\n-- \ngenerated by $0 on $HOSTNAME\nreport bugs to nick black <dank@qemfd.net>" ) 2>&1 | snmail -v -s -c "$NEWSLEAF" "$NEWSROOT"
